// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import app "github.com/uudashr/marketplace/internal/app"

import mock "github.com/stretchr/testify/mock"
import product "github.com/uudashr/marketplace/internal/product"
import store "github.com/uudashr/marketplace/internal/store"

// AppService is an autogenerated mock type for the AppService type
type AppService struct {
	mock.Mock
}

// OfferNewProduct provides a mock function with given fields: _a0
func (_m *AppService) OfferNewProduct(_a0 app.OfferNewProductCommand) (*product.Product, error) {
	ret := _m.Called(_a0)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(app.OfferNewProductCommand) *product.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.OfferNewProductCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewCategory provides a mock function with given fields: _a0
func (_m *AppService) RegisterNewCategory(_a0 app.RegisterNewCategoryCommand) (*product.Category, error) {
	ret := _m.Called(_a0)

	var r0 *product.Category
	if rf, ok := ret.Get(0).(func(app.RegisterNewCategoryCommand) *product.Category); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RegisterNewCategoryCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewStore provides a mock function with given fields: _a0
func (_m *AppService) RegisterNewStore(_a0 app.RegisterNewStoreCommand) (*store.Store, error) {
	ret := _m.Called(_a0)

	var r0 *store.Store
	if rf, ok := ret.Get(0).(func(app.RegisterNewStoreCommand) *store.Store); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RegisterNewStoreCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCategories provides a mock function with given fields:
func (_m *AppService) RetrieveCategories() ([]*product.Category, error) {
	ret := _m.Called()

	var r0 []*product.Category
	if rf, ok := ret.Get(0).(func() []*product.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCategoryByID provides a mock function with given fields: _a0
func (_m *AppService) RetrieveCategoryByID(_a0 app.RetrieveCategoryByIDCommand) (*product.Category, error) {
	ret := _m.Called(_a0)

	var r0 *product.Category
	if rf, ok := ret.Get(0).(func(app.RetrieveCategoryByIDCommand) *product.Category); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RetrieveCategoryByIDCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveProductByID provides a mock function with given fields: _a0
func (_m *AppService) RetrieveProductByID(_a0 app.RetrieveProductByIDCommand) (*product.Product, error) {
	ret := _m.Called(_a0)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(app.RetrieveProductByIDCommand) *product.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RetrieveProductByIDCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveProducts provides a mock function with given fields:
func (_m *AppService) RetrieveProducts() ([]*product.Product, error) {
	ret := _m.Called()

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func() []*product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveProductsOfStore provides a mock function with given fields: _a0
func (_m *AppService) RetrieveProductsOfStore(_a0 app.RetrieveProductsOfStoreCommand) ([]*product.Product, error) {
	ret := _m.Called(_a0)

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func(app.RetrieveProductsOfStoreCommand) []*product.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RetrieveProductsOfStoreCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStoreByID provides a mock function with given fields: _a0
func (_m *AppService) RetrieveStoreByID(_a0 app.RetrieveStoreByIDCommand) (*store.Store, error) {
	ret := _m.Called(_a0)

	var r0 *store.Store
	if rf, ok := ret.Get(0).(func(app.RetrieveStoreByIDCommand) *store.Store); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(app.RetrieveStoreByIDCommand) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStores provides a mock function with given fields:
func (_m *AppService) RetrieveStores() ([]*store.Store, error) {
	ret := _m.Called()

	var r0 []*store.Store
	if rf, ok := ret.Get(0).(func() []*store.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
