// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import product "github.com/uudashr/marketplace/internal/product"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ProductByID provides a mock function with given fields: id
func (_m *Repository) ProductByID(id string) (*product.Product, error) {
	ret := _m.Called(id)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(string) *product.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Products provides a mock function with given fields:
func (_m *Repository) Products() ([]*product.Product, error) {
	ret := _m.Called()

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func() []*product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsOfStore provides a mock function with given fields: storeID
func (_m *Repository) ProductsOfStore(storeID string) ([]*product.Product, error) {
	ret := _m.Called(storeID)

	var r0 []*product.Product
	if rf, ok := ret.Get(0).(func(string) []*product.Product); ok {
		r0 = rf(storeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(storeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0
func (_m *Repository) Store(_a0 *product.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
